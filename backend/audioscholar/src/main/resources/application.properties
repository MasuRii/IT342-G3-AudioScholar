# ===================================================================
# Springboot Configuration
# ===================================================================
spring.application.name=audioscholar
# Set maximum file size (Keep as is)
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB
app.temp-file-dir=E:/audioscholar_temp_uploads
#Loggings
# Example: Set logging level for your application's packages to DEBUG
logging.level.edu.cit.audioscholar=DEBUG
# Example: Set logging level for Spring framework security to INFO
logging.level.org.springframework.security=INFO
# Enable DEBUG logging for all packages
logging.level.root=INFO
logging.level.org.springframework=INFO
#logging.file.name=springbootbackend.log
# Reset log file on application startup
#logging.logback.rollingpolicy.clean-history-on-start=true
#logging.logback.rollingpolicy.max-history=1
#logging.logback.rollingpolicy.max-file-size=100MB
# ngrok http --url=mastodon-balanced-randomly.ngrok-free.app 8080

spring.cache.cache-names=uptimeRobotMonitors,audioMetadataByUser,audioMetadataById,jwtDenylistCache,usersById,githubApiResults

uptimerobot.api.key=${UPTIME_ROBOT_API}
uptimerobot.api.base-url=https://api.uptimerobot.com/v2


# ===================================================================
# Firebase Configuration
# ===================================================================
spring.cloud.gcp.project-id=audioscholar-39b22
spring.cloud.gcp.firestore.enabled=true
firebase.web.api-key=AIzaSyAaB82QznADoW1xZt1UlKHG9HruhxTF82U
firebase.database.url=https://audioscholar-39b22.firebaseio.com
firebase.service-account.file=firebase-service-account.json
firebase.firestore.collection.audiometadata=audio_metadata
firebase.firestore.collection.summaries=summaries
firebase.firestore.collection.recommendations=learning_recommendations
# ===================================================================
# NHOST Configuration
# ===================================================================
#Orlanes
#nhost.storage.url=https://jcrywhcmpyxmjsgyligr.storage.ap-southeast-1.nhost.run/v1/files

#Biacolo
nhost.storage.url=https://oxhxfapvobuzkdjmhlby.storage.ap-southeast-1.nhost.run/v1/files

# Reference the admin secret via an environment variable named NHOST_ADMIN_SECRET
# Spring Boot will automatically pick up the NHOST_ADMIN_SECRET environment variable.
nhost.storage.admin-secret=${NHOST_ADMIN_SECRET}
# ===================================================================
# Youtube Configuration
# ===================================================================
youtube.api.key=${YOUTUBE_API_KEY}
# ===================================================================
# Google Configuration
# ===================================================================
# Google AI API Key (Keep as is)
google.ai.api.key=${GOOGLE_AI_API_KEY}
google.oauth.web.client.id=94663253748-ofnpqjepvrupp7ud1gf03lp0i4ucmb6q.apps.googleusercontent.com
google.oauth.android.client.id=94663253749-3ar07uapoptre1fakroesknatsndcar9.apps.googleusercontent.com
# Google Provider
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
# ===================================================================
# Ngrok Configuration
# ===================================================================
# Static Domain
# ngrok http --url=mastodon-balanced-randomly.ngrok-free.app 8080
# ===================================================================
# Github Configuration
# ===================================================================
# GitHub Provider
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email
# GitHub API Endpoints
github.api.url.token=https://github.com/login/oauth/access_token
github.api.url.user=https://api.github.com/user
github.api.url.emails=https://api.github.com/user/emails


# ===================================================================
# RabbitMQ Configuration
# ===================================================================
# For accessing the RabbitMQ Web UI http://localhost:15672/
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ---> START: Added Listener Configuration for Memory Management <---
# Configure the listener container specifically for the audio processing queue
# Set concurrency to 1 to process only one message at a time per container instance
spring.rabbitmq.listener.simple.concurrency=1
# Set max concurrency to 1 to prevent scaling up threads for this listener
spring.rabbitmq.listener.simple.max-concurrency=1
# Set prefetch count to 1 to fetch only one message from the broker at a time
# This prevents the listener from holding multiple (potentially large) messages in memory
spring.rabbitmq.listener.simple.prefetch=1
# Optional: Increase acknowledgment timeout if processing takes very long
# spring.rabbitmq.listener.simple.default-requeue-rejected=false # Consider dead-lettering instead of requeue on error
# spring.rabbitmq.listener.simple.acknowledge-mode=AUTO # Default is AUTO, consider MANUAL if needed for complex logic
# ---> END: Added Listener Configuration for Memory Management <---

# ===================================================================
# JTW Configuration
# ===================================================================
app.jwt.secret=${JWT_SECRET}
# Token validity in milliseconds (e.g., 1 hour = 3600000, 1 day = 86400000)
app.jwt.expiration-ms=${JWT_EXPIRATION_MS:3600000}
# ===================================================================
# Bucket4j Rate Limiting Configuration
# ===================================================================
bucket4j.enabled=true
# Filter 0: Rate limit login/oauth attempts (Stateful Chain)
# Apply this filter first (lower order number)
bucket4j.filters[0].id=login-oauth-limit
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].filter-order=1
# Use Ant-style patterns for multiple paths
bucket4j.filters[0].url=/login/**,/oauth2/**
bucket4j.filters[0].rate-limits[0].cache-key='getRemoteAddr()'
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=10
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=MINUTES
# Use the custom response you defined
bucket4j.filters[0].http-response-body={"message": "Too many login attempts. Please try again later.", "status": 429}
bucket4j.filters[0].http-status-code=TOO_MANY_REQUESTS
# Filter 1: Rate limit audio uploads (Stateless Chain)
# Apply this filter next if the first didn't match
bucket4j.filters[1].id=audio-upload-limit
bucket4j.filters[1].filter-method=servlet
bucket4j.filters[1].filter-order=2
bucket4j.filters[1].url=/api/audio/upload
bucket4j.filters[1].rate-limits[0].cache-key='getRemoteAddr()'
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=30
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=HOURS
# Use the custom response you defined
bucket4j.filters[1].http-response-body={"message": "Too many upload requests. Please try again later.", "status": 429}
bucket4j.filters[1].http-status-code=TOO_MANY_REQUESTS

# ===================================================================
# ConvertAPI Configuration
# ===================================================================
# Reference the ConvertAPI secret via an environment variable named CONVERTAPI_SECRET
convertapi.secret=${CONVERTAPI_SECRET}