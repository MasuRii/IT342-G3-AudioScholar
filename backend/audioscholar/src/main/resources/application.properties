spring.application.name=audioscholar

# Firebase Configuration (Keep as is)
firebase.database.url=https://audioscholar-39b22.firebaseio.com
firebase.service-account.file=firebase-service-account.json
firebase.firestore.collection.audiometadata=audio_metadata

#Orlanes
#nhost.storage.url=https://jcrywhcmpyxmjsgyligr.storage.ap-southeast-1.nhost.run/v1/files

#Biacolo
nhost.storage.url=https://oxhxfapvobuzkdjmhlby.storage.ap-southeast-1.nhost.run/v1/files

# Reference the admin secret via an environment variable named NHOST_ADMIN_SECRET
# Spring Boot will automatically pick up the NHOST_ADMIN_SECRET environment variable.
nhost.storage.admin-secret=${NHOST_ADMIN_SECRET}

# Set maximum file size (Keep as is)
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# Google AI API Key (Keep as is)
google.ai.api.key=AIzaSyBh5zqRvZrjmWIGaG4FM7FDTqIHsq6FWG4

# Google Provider
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# GitHub Provider
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email

# --- JWT Configuration ---
# Generate a strong secret (e.g., using openssl rand -base64 32) and store securely (e.g., env var)
# Example placeholder ONLY - REPLACE THIS!
app.jwt.secret=${JWT_SECRET}
# Token validity in milliseconds (e.g., 1 hour = 3600000, 1 day = 86400000)
app.jwt.expiration-ms=${JWT_EXPIRATION_MS:3600000}
      
# --- Bucket4j Rate Limiting Configuration ---
bucket4j.enabled=true

# Define a filter for rate limiting API requests
bucket4j.filters[0].id=api-rate-limit # Unique ID for this filter configuration
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].filter-order=1

# Define the URL pattern this filter applies to. Use Ant-style for simplicity.
bucket4j.filters[0].url=/api/**

# Add this line instead
bucket4j.filters[0].rate-limits[0].cache-key='getRemoteAddr()'

# Define the rate limits
# bucket4j.filters[0].rate-limits[0].expression=isServletRequest() # <<< REMOVED: Redundant with filter-method=servlet
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=20
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=MINUTES

# Correct syntax for the response body
bucket4j.filters[0].http-response-body={"message": "Too many requests. Please try again later.", "status": 429}
bucket4j.filters[0].http-status-code=TOO_MANY_REQUESTS