# ===================================================================
# Springboot Configuration
# ===================================================================

spring.application.name=audioscholar

# Example: Set logging level for your application's packages to DEBUG
logging.level.edu.cit.audioscholar=DEBUG
# Example: Set logging level for Spring framework security to INFO
logging.level.org.springframework.security=INFO

# Set maximum file size (Keep as is)
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# ===================================================================
# Firebase Configuration
# ===================================================================

firebase.database.url=https://audioscholar-39b22.firebaseio.com
firebase.service-account.file=firebase-service-account.json
firebase.firestore.collection.audiometadata=audio_metadata



# ===================================================================
# NHOST Configuration
# ===================================================================
#Orlanes
#nhost.storage.url=https://jcrywhcmpyxmjsgyligr.storage.ap-southeast-1.nhost.run/v1/files

#Biacolo
nhost.storage.url=https://oxhxfapvobuzkdjmhlby.storage.ap-southeast-1.nhost.run/v1/files

# Reference the admin secret via an environment variable named NHOST_ADMIN_SECRET
# Spring Boot will automatically pick up the NHOST_ADMIN_SECRET environment variable.
nhost.storage.admin-secret=${NHOST_ADMIN_SECRET}


# ===================================================================
# Google Configuration
# ===================================================================

# Google AI API Key (Keep as is)
google.ai.api.key=AIzaSyBh5zqRvZrjmWIGaG4FM7FDTqIHsq6FWG4

# Google Provider
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email


# ===================================================================
# Github Configuration
# ===================================================================

# GitHub Provider
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email


# ===================================================================
# JTW Configuration
# ===================================================================
app.jwt.secret=${JWT_SECRET}
# Token validity in milliseconds (e.g., 1 hour = 3600000, 1 day = 86400000)
app.jwt.expiration-ms=${JWT_EXPIRATION_MS:3600000}
      
# ===================================================================
# Bucket4j Rate Limiting Configuration
# ===================================================================

bucket4j.enabled=true

# Filter 0: Rate limit login/oauth attempts (Stateful Chain)
# Apply this filter first (lower order number)
bucket4j.filters[0].id=login-oauth-limit
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].filter-order=1
# Use Ant-style patterns for multiple paths
bucket4j.filters[0].url=/login/**,/oauth2/**
bucket4j.filters[0].rate-limits[0].cache-key='getRemoteAddr()'
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=10
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=MINUTES
# Use the custom response you defined
bucket4j.filters[0].http-response-body={"message": "Too many login attempts. Please try again later.", "status": 429}
bucket4j.filters[0].http-status-code=TOO_MANY_REQUESTS

# Filter 1: Rate limit audio uploads (Stateless Chain)
# Apply this filter next if the first didn't match
bucket4j.filters[1].id=audio-upload-limit
bucket4j.filters[1].filter-method=servlet
bucket4j.filters[1].filter-order=2
bucket4j.filters[1].url=/api/audio/upload
bucket4j.filters[1].rate-limits[0].cache-key='getRemoteAddr()'
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=30
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=HOURS
# Use the custom response you defined
bucket4j.filters[1].http-response-body={"message": "Too many upload requests. Please try again later.", "status": 429}
bucket4j.filters[1].http-status-code=TOO_MANY_REQUESTS